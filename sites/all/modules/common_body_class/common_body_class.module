<?php

/**
 * @file
 * Add custom body classes in <em><body></em> tag.
 */

/**
 * Shows this class on every page except the listed pages.
 */
define('COMMON_BODY_CLASS_VISIBILITY_NOTLISTED', 0);

/**
 * Shows this class on only the listed pages.
 */
define('COMMON_BODY_CLASS_VISIBILITY_LISTED', 1);

/**
 * Shows this class if the associated PHP code returns TRUE.
 */
define('COMMON_BODY_CLASS_VISIBILITY_PHP', 2);

/**
 * Implements hook_permission().
 */
function common_body_class_permission() {
  return array(
    'administer common body class' => array(
      'title' => t('Administer common body class'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function common_body_class_menu() {
  $items['admin/structure/common_body_class'] = array(
    'title' => 'Common Body Class',
    'description' => 'Configure what body classes appear in your page body.',
    'page callback' => 'common_body_class_admin_display',
    'access arguments' => array('administer common body class'),
    'file' => 'common_body_class.admin.inc',
  );
  $items['admin/structure/common_body_class/add'] = array(
    'title' => 'Add class',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('common_body_class_add_class_form'),
    'access arguments' => array('administer common body class'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'common_body_class.admin.inc',
  );
  $items['admin/structure/common_body_class/%/edit'] = array(
    'title' => 'Configure class',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('common_body_class_admin_class_configure', 3),
    'access arguments' => array('administer common body class'),
    'file' => 'common_body_class.admin.inc',
  );
  $items['admin/structure/common_body_class/%/delete'] = array(
    'title' => 'Delete class',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('common_body_class_admin_class_delete', 3),
    'access arguments' => array('administer common body class'),
    'file' => 'common_body_class.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_preprocess_html().
 */
function common_body_class_preprocess_html(&$vars) {
  $cbcs = common_body_class_list();
  common_body_class_get_alter_list($cbcs);
  if (!empty($cbcs)) {
    foreach ($cbcs as $record) {
      $classes_array = explode(' ', $record->class_name);
      foreach ($classes_array as $class) {
        $token = token_scan($class);
        if (!empty($token)) {
          $token_value = token_replace($class);
          if (strpos($token_value, ',') !== FALSE) {
            $new_classes = explode(', ', $token_value);
            foreach ($new_classes as $new_class) {
              $vars['classes_array'][] = drupal_clean_css_identifier($new_class);
            }
          }
          else {
            $vars['classes_array'][] = drupal_clean_css_identifier($token_value);
          }
        }
        else {
          $vars['classes_array'][] = drupal_clean_css_identifier($class);
        }
      }
    }
  }
}

/**
 * Loads a common body class objects from the database.
 *
 * This function returns the list of common body class data.
 *
 * @return array
 *   A common body class object list.
 */
function common_body_class_list() {
  $query = db_select('common_body_class', 'cbc');
  $query->fields('cbc');
  $query->condition('cbc.status', 1);
  $cbc_list = $query->execute()->fetchAll();

  return $cbc_list;
}

/**
 * Loads a common body class object from the database.
 *
 * Returns the first CBC data matching the cbcid parameters.
 *
 * @param int $cbcid
 *   Unique ID of the common body class.Pass NULL to return
 *   an empty cbc object.
 *
 * @return object
 *   A common body class object.
 */
function common_body_class_data_load($cbcid) {
  if (isset($cbcid)) {
    $query = db_select('common_body_class', 'cbc');
    $query->fields('cbc');
    $query->condition('cbc.cbcid', $cbcid);
    $cbc = $query->execute()->fetchObject();
  }
  // If the cbc does not exist in the database yet return a stub cbc
  // object.
  if (empty($cbc)) {
    $cbc = new stdClass();
    $cbc->cbcid = $cbcid;
  }

  return $cbc;
}

/**
 * Loads a common body class role from the database.
 *
 * @param int $cbcid
 *   Unique ID of the common body class.
 *
 * @return array
 *   A common body class role column.
 */
function common_body_class_role_load($cbcid) {
  if (isset($cbcid)) {
    $query = db_select('common_body_class_role', 'cbcr');
    $query->fields('cbcr', array('rid'));
    $query->condition('cbcr.cbcid', $cbcid);
    $cbc = $query->execute()->fetchCol();
  }
  if (empty($cbc)) {
    $cbc = array();
  }

  return $cbc;
}

/**
 * Checks the page, user role, settings.
 *
 * Removes the common body class if the visibility conditions are not met.
 */
function common_body_class_get_alter_list(&$cbcs) {
  global $user;

  // Build an array of roles for each common body class.
  $cbc_roles = array();
  $query = db_select('common_body_class_role', 'cbcr');
  $query->fields('cbcr');
  $results = $query->execute()->fetchAll();
  foreach ($results as $record) {
    $cbc_roles[$record->cbcid][] = $record->rid;
  }

  foreach ($cbcs as $key => $cbc) {

    // If a CBC has no roles associated, it is displayed for every role.
    // For CBCs with roles associated, if none of the user's roles matches
    // the settings from this CBC, remove it from the CBC list.
    if (isset($cbc_roles[$cbc->cbcid]) && !array_intersect($cbc_roles[$cbc->cbcid], array_keys($user->roles))) {
      // No match.
      unset($cbcs[$key]);
      continue;
    }
    $enabled = TRUE;
    // Limited visibility common body class must list at least one page.
    if ($cbc->visibility == COMMON_BODY_CLASS_VISIBILITY_LISTED && empty($cbc->pages)) {
      $enabled = FALSE;
    }

    if (!$enabled) {
      unset($cbcs[$key]);
      continue;
    }

    // Match path if necessary.
    if ($cbc->pages) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($cbc->pages);
      if ($cbc->visibility < COMMON_BODY_CLASS_VISIBILITY_PHP) {
        // Convert the Drupal path to lowercase.
        $path = drupal_strtolower(drupal_get_path_alias(current_path()));
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != current_path()) {
          $page_match = $page_match || drupal_match_path(current_path(), $pages);
        }
        // When $cbc->visibility has a value of 0
        // (COMMON_BODY_CLASS_VISIBILITY_NOTLISTED), the class is displayed on
        // all pages except those listed in $cbc->pages. When set to 1
        // (COMMON_BODY_CLASS_VISIBILITY_LISTED), it is displayed only on
        // those pages listed in $cbc->pages.
        $page_match = !($cbc->visibility xor $page_match);
      }
      elseif (module_exists('php')) {
        $page_match = php_eval($cbc->pages);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }
    if (!$page_match) {
      unset($cbcs[$key]);
    }
  }
}
